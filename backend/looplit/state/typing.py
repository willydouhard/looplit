from typing import Dict, List, Literal, Optional, TypedDict, Union


class ChatCompletionContentPartTextParam(TypedDict, total=False):
    text: str
    """The text content."""

    type: Literal["text"]
    """The type of the content part."""


class ImageURL(TypedDict, total=False):
    url: str
    """Either a URL of the image or the base64 encoded image data."""

    detail: Literal["auto", "low", "high"]
    """Specifies the detail level of the image.

    Learn more in the
    [Vision guide](https://platform.openai.com/docs/guides/vision#low-or-high-fidelity-image-understanding).
    """


class ChatCompletionContentPartImageParam(TypedDict, total=False):
    image_url: ImageURL

    type: Literal["image_url"]
    """The type of the content part."""


class InputAudio(TypedDict, total=False):
    data: str
    """Base64 encoded audio data."""

    format: Literal["wav", "mp3"]
    """The format of the encoded audio data. Currently supports "wav" and "mp3"."""


class ChatCompletionContentPartInputAudioParam(TypedDict, total=False):
    input_audio: InputAudio

    type: Literal["input_audio"]
    """The type of the content part. Always `input_audio`."""


ChatCompletionContentPartParam = Union[
    ChatCompletionContentPartTextParam,
    ChatCompletionContentPartImageParam,
    ChatCompletionContentPartInputAudioParam,
]


class ChatCompletionSystemMessageParam(TypedDict, total=False):
    content: Union[str, List[ChatCompletionContentPartTextParam]]
    """The contents of the system message."""

    role: Literal["system"]
    """The role of the messages author, in this case `system`."""

    name: str
    """An optional name for the participant.

    Provides the model information to differentiate between participants of the same
    role.
    """


class ChatCompletionUserMessageParam(TypedDict, total=False):
    content: Union[str, List[ChatCompletionContentPartParam]]
    """The contents of the user message."""

    role: Literal["user"]
    """The role of the messages author, in this case `user`."""

    name: str
    """An optional name for the participant.

    Provides the model information to differentiate between participants of the same
    role.
    """


class Audio(TypedDict, total=False):
    id: str
    """Unique identifier for a previous audio response from the model."""


class ChatCompletionContentPartRefusalParam(TypedDict, total=False):
    refusal: str
    """The refusal message generated by the model."""

    type: Literal["refusal"]
    """The type of the content part."""


ContentArrayOfContentPart = Union[
    ChatCompletionContentPartTextParam, ChatCompletionContentPartRefusalParam
]


class FunctionCall(TypedDict, total=False):
    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: str
    """The name of the function to call."""


class Function(TypedDict, total=False):
    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: str
    """The name of the function to call."""


class ChatCompletionMessageToolCallParam(TypedDict, total=False):
    id: str
    """The ID of the tool call."""

    function: Function
    """The function that the model called."""

    type: Literal["function"]
    """The type of the tool. Currently, only `function` is supported."""


class ChatCompletionAssistantMessageParam(TypedDict, total=False):
    role: Literal["assistant"]
    """The role of the messages author, in this case `assistant`."""

    audio: Optional[Audio]
    """Data about a previous audio response from the model.

    [Learn more](https://platform.openai.com/docs/guides/audio).
    """

    content: Union[str, List[ContentArrayOfContentPart], None]
    """The contents of the assistant message.

    Required unless `tool_calls` or `function_call` is specified.
    """

    function_call: Optional[FunctionCall]
    """Deprecated and replaced by `tool_calls`.

    The name and arguments of a function that should be called, as generated by the
    model.
    """

    name: str
    """An optional name for the participant.

    Provides the model information to differentiate between participants of the same
    role.
    """

    refusal: Optional[str]
    """The refusal message by the assistant."""

    tool_calls: List[ChatCompletionMessageToolCallParam]
    """The tool calls generated by the model, such as function calls."""


class ChatCompletionToolMessageParam(TypedDict, total=False):
    content: Union[str, List[ChatCompletionContentPartTextParam]]
    """The contents of the tool message."""

    role: Literal["tool"]
    """The role of the messages author, in this case `tool`."""

    tool_call_id: str
    """Tool call that this message is responding to."""


ChatCompletionMessageParam = Union[
    ChatCompletionSystemMessageParam,
    ChatCompletionUserMessageParam,
    ChatCompletionAssistantMessageParam,
    ChatCompletionToolMessageParam,
]

FunctionParameters = Dict[str, object]


class FunctionDefinition(TypedDict, total=False):
    name: str
    """The name of the function to be called.

    Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length
    of 64.
    """

    description: str
    """
    A description of what the function does, used by the model to choose when and
    how to call the function.
    """

    parameters: FunctionParameters
    """The parameters the functions accepts, described as a JSON Schema object.

    See the [guide](https://platform.openai.com/docs/guides/function-calling) for
    examples, and the
    [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
    documentation about the format.

    Omitting `parameters` defines a function with an empty parameter list.
    """

    strict: Optional[bool]
    """Whether to enable strict schema adherence when generating the function call.

    If set to true, the model will follow the exact schema defined in the
    `parameters` field. Only a subset of JSON Schema is supported when `strict` is
    `true`. Learn more about Structured Outputs in the
    [function calling guide](docs/guides/function-calling).
    """


class ChatCompletionToolParam(TypedDict, total=False):
    function: FunctionDefinition

    type: Literal["function"]
    """The type of the tool. Currently, only `function` is supported."""
